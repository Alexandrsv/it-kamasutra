{"version":3,"sources":["assets/images/avatar-placeholder.png","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","state","editMode","status","props","activateEditMode","setState","onStatusChange","e","currentTarget","value","this","updateStatus","prevProps","prevState","onDoubleClick","onChange","autoFocus","onBlur","deactivateEditMode","bind","React","Component","ProfileInfo","profile","className","s","description_block","fullName","avatarImg","src","photos","large","avaPlaceholder","alt","aboutMe","lookingForAJobDescription","Object","entries","contacts","map","i","index","url","test","href","target","rel","Preloader","Post","item","Math","floor","random","text","message","like_count","MyPosts","memo","console","log","posts_block","AddNewPostReduxForm","onSubmit","formData","addPost","newPostBody","posts","el","id","maxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","type","name","component","Textarea","validate","required","MyPostsContainer","connect","profilePage","newPostText","dispatch","addPostActionCreator","Profile","content","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfileData","getStatus","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.aa7dd47b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar-placeholder.05262aba.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2wLDD\",\"image_header\":\"Profile_image_header__2kIvZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image_header\":\"ProfileInfo_image_header__28rWN\",\"description_block\":\"ProfileInfo_description_block__187mR\",\"avatarImg\":\"ProfileInfo_avatarImg__2izmI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts_block\":\"MyPosts_posts_block__2sqK_\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\",\"posts\":\"Post_posts__144VX\",\"text\":\"Post_text__3_Vii\"};","import React from 'react';\n\nclass ProfileStatus extends React.Component {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState({\n            editMode: true\n        });\n    }\n\n    deactivateEditMode() {\n        this.setState({\n            editMode: false\n        });\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if (prevProps.status !== this.props.status) {\n            this.setState({\n                status: this.props.status\n            });\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div>\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"-------\"}</span>\n                </div>\n                }\n                {this.state.editMode &&\n                <div>\n                    <input onChange={this.onStatusChange} autoFocus={true}\n                           onBlur={this.deactivateEditMode.bind(this)}\n                           value={this.state.status}/>\n                </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default ProfileStatus;\n","import React from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport s from './ProfileInfo.module.css';\nimport ProfileStatus from \"./ProfileStatus\";\nimport avaPlaceholder from '../../../assets/images/avatar-placeholder.png'\n\nconst ProfileInfo = ({profile, status, updateStatus}) => {\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <>\n            <div className={s.description_block}>\n                <h2>{profile.fullName}</h2>\n                <img className={s.avatarImg} src={profile.photos.large || avaPlaceholder} alt=\"\"/>\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\n                <div>aboutMe - {profile.aboutMe}</div>\n                <div>lookingForAJobDescription - {profile.lookingForAJobDescription}</div>\n                <br/>\n                <div>{Object.entries(profile.contacts).map((i, index) => {\n                    let url\n                    if (!/^https?:\\/\\//.test(i[1]) && i[1]) {\n                        url = 'https://' + i[1]\n                    } else {\n                        url = i[1]\n                    }\n                    return <div key={index}>{i[0]} - <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a>\n                    </div>\n                })}</div>\n\n            </div>\n        </>\n    );\n};\n\nexport default ProfileInfo;\n","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n    return (\n\n        <div className={s.item}>\n            <img src={`https://i.pravatar.cc/80?img=${Math.floor(Math.random() * 50)}`} alt={'ava'}/>\n            <span className={s.text}>{props.message}</span>\n            <div>\n                <span>{props.like_count} ‚ù§</span>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Post;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\n\n\nconst MyPosts = React.memo((props) => {\n\n    let onAddPost = (formData) => {\n        props.addPost(formData.newPostBody)\n    }\n    console.log('RENDER')\n    return (\n\n        <div className={s.posts_block}>\n            <h2>My posts</h2>\n            <div>\n                <div>\n                    <AddNewPostReduxForm onSubmit={onAddPost}/>\n                </div>\n            </div>\n            <div className={s.posts}>\n                {props.posts.map((el) => <Post id={el.id} key={el.id} message={el.message}\n                                               like_count={el.like_count}/>)}\n            </div>\n        </div>\n    );\n})\n\nconst maxLength = maxLengthCreator(10)\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    placeholder={'New post text'}\n                    type=\"text\" name={'newPostBody'}\n                    component={Textarea}\n                    validate={[required, maxLength]}\n                />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    );\n};\n\nconst AddNewPostReduxForm = reduxForm({\n    form: 'ProfileAddNewPostForm'\n})(AddNewPostForm)\n\n\nexport default MyPosts;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addPostActionCreator, } from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => { dispatch(addPostActionCreator(newPostText)) },\n    }\n}\n\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;\n","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nconst Profile = (props) => {\n\n    return (\n        <div className={s.content}>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n        </div>\n    );\n};\n\nexport default Profile;\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport Profile from './Profile';\nimport {getStatus, getUserProfileData, updateStatus} from '../../redux/profile-reducer'\nimport {withRouter} from 'react-router-dom';\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId || this.props.authorizedUserId\n        if (!userId){\n            this.props.history.push('login')\n        }\n        this.props.getUserProfileData(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\n            let userId = this.props.match.params.userId || this.props.authorizedUserId\n            if (!userId){\n                this.props.history.push('login')\n            }\n            this.props.getUserProfileData(userId)\n            this.props.getStatus(userId)\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile}/>\n            </div>\n        )\n    }\n}\n\n\nlet mapStateToProps = (state) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth,\n    }\n}\n\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfileData, getStatus, updateStatus}),\n    // withAuthRedirect,\n    withRouter,\n)(ProfileContainer)\n"],"sourceRoot":""}