{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","console","log","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageForm","messages","setMessages","messageHandler","e","newMessage","JSON","parse","data","pervMess","style","height","overflowY","map","m","i","Message","message","setNewMessage","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","value","disabled","onClick","send","src","photo","width","alt","to","userId","userName","ChatPage"],"mappings":"wLAqBMA,EAAW,WAAO,IAAD,EACeC,qBADf,mBACZC,EADY,KACDC,EADC,KA0BnB,OAvBAC,qBAAU,WACN,IAAIC,EAEEC,EAAe,WACjBC,QAAQC,IAAI,YACZC,WAAWC,EAAe,MAG9B,SAASA,IAAiB,IAAD,MACnB,QAAF,EAAAL,SAAA,SAAIM,oBAAoB,QAASL,GAC/B,QAAF,EAAAD,SAAA,SAAIO,QAEF,QAAF,EADAP,EAAK,IAAIQ,UAAU,uEACnB,SAAIC,iBAAiB,QAASR,GAC9BH,EAAaE,GAIjB,OADAK,IACO,WACHL,EAAGM,oBAAoB,QAASL,GAChCD,EAAGO,WAER,IAGC,gCACI,cAACG,EAAD,CAAUb,UAAWA,IACrB,cAACc,EAAD,CAAgBd,UAAWA,QAKjCa,EAA4D,SAAC,GAAiB,IAAhBb,EAAe,EAAfA,UAAe,EAE/CD,mBAA4B,IAFmB,mBAExEgB,EAFwE,KAE9DC,EAF8D,KAgB/E,OAZAd,qBAAU,WACN,IAAMe,EAAiB,SAACC,GACpB,IAAMC,EAAaC,KAAKC,MAAMH,EAAEI,MAChCjB,QAAQC,IAAIa,GACZH,GAAY,SAACO,GAAD,4BAAkBA,GAAlB,YAA+BJ,QAG/C,OADS,OAATnB,QAAS,IAATA,KAAWY,iBAAiB,UAAWK,GAChC,WACM,OAATjB,QAAS,IAATA,KAAWS,oBAAoB,UAAWQ,MAE/C,CAACjB,IAGA,qBAAKwB,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAzC,SACKX,EAASY,KAAI,SAACC,EAAGC,GAAJ,OAAU,cAACC,EAAD,CAAiBC,QAASH,GAAZC,SAM5Cf,EAAkE,SAAC,GAAiB,IAAhBd,EAAe,EAAfA,UAAe,EACjDD,mBAAS,IADwC,mBAC9EoB,EAD8E,KAClEa,EADkE,OAE/CjC,mBAA8B,WAFiB,mBAE9EkC,EAF8E,KAEjEC,EAFiE,KAIrFhC,qBAAU,WACN,IAAMiC,EAAc,kBAAMD,EAAe,UAEzC,OADS,OAATlC,QAAS,IAATA,KAAWY,iBAAiB,OAAQuB,GAC7B,WACM,OAATnC,QAAS,IAATA,KAAWS,oBAAoB,OAAQ0B,MAE5C,CAACnC,IAWJ,OACI,gCACI,8BACI,cAAC,IAAD,CAAUoC,SAZL,SAAClB,GACdc,EAAcd,EAAEmB,cAAcC,QAWQA,MAAOnB,MAEzC,8BACI,cAAC,IAAD,CAAQoB,SAAyB,MAAfN,GAAuC,UAAhBA,EACjCO,QAbA,WACVrB,IACO,OAATnB,QAAS,IAATA,KAAWyC,KAAKtB,GAChBa,EAAc,MASV,0EAOVF,EAA4C,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAChD,OACI,gCACI,qBAAKW,IAAKX,EAAQY,MAAOnB,MAAO,CAACoB,MAAO,QAASC,IAAI,QACrD,eAAC,IAAD,CAAMC,GAAE,mBAAcf,EAAQgB,QAA9B,UAAyChB,EAAQiB,SAAjD,OACA,uBACCjB,EAAQA,QACT,2BAKGkB,UAhHM,WACjB,OACI,8BACI,cAACnD,EAAD","file":"static/js/6.ad7ff6f7.chunk.js","sourcesContent":["import React, {FC, useEffect, useState} from 'react';\nimport {Button} from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport {Link} from 'react-router-dom';\n\n\nexport type ChatMessageType = {\n    message: string\n    photo: string\n    userId: number\n    userName: string\n}\n\nconst ChatPage: FC = () => {\n    return (\n        <div>\n            <Chat/>\n        </div>\n    );\n};\n\nconst Chat: FC = () => {\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>()\n\n    useEffect(() => {\n        let ws: WebSocket\n\n        const closeHandler = () => {\n            console.log('Close WS')\n            setTimeout(createChannel, 3000)\n        }\n\n        function createChannel() {\n            ws?.removeEventListener('close', closeHandler)\n            ws?.close()\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n            ws?.addEventListener('close', closeHandler)\n            setWsChannel(ws)\n        }\n\n        createChannel()\n        return () => {\n            ws.removeEventListener('close', closeHandler)\n            ws.close()\n        }\n    }, [])\n\n    return (\n        <div>\n            <Messages wsChannel={wsChannel}/>\n            <AddMessageForm wsChannel={wsChannel}/>\n        </div>\n    );\n}\n\nconst Messages: FC<{ wsChannel: WebSocket | null | undefined }> = ({wsChannel}) => {\n\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\n\n    useEffect(() => {\n        const messageHandler = (e: MessageEvent) => {\n            const newMessage = JSON.parse(e.data);\n            console.log(newMessage)\n            setMessages((pervMess) => [...pervMess, ...newMessage])\n        };\n        wsChannel?.addEventListener('message', messageHandler)\n        return () => {\n            wsChannel?.removeEventListener('message', messageHandler)\n        }\n    }, [wsChannel])\n\n    return (\n        <div style={{height: '500px', overflowY: 'auto'}}>\n            {messages.map((m, i) => <Message key={i} message={m}/>)}\n\n        </div>\n    );\n};\n\nconst AddMessageForm: FC<{ wsChannel: WebSocket | null | undefined }> = ({wsChannel}) => {\n    const [newMessage, setNewMessage] = useState('')\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\n\n    useEffect(() => {\n        const openHandler = () => setReadyStatus('ready');\n        wsChannel?.addEventListener('open', openHandler)\n        return () => {\n            wsChannel?.removeEventListener('open', openHandler)\n        }\n    }, [wsChannel])\n\n    const onChange = (e: any) => {\n        setNewMessage(e.currentTarget.value)\n    }\n    const sendMessage = () => {\n        if (!!newMessage) {\n            wsChannel?.send(newMessage)\n            setNewMessage('')\n        }\n    }\n    return (\n        <div>\n            <div>\n                <TextArea onChange={onChange} value={newMessage}/>\n            </div>\n            <div>\n                <Button disabled={readyStatus == null || readyStatus !== 'ready'}\n                        onClick={sendMessage}>Отправить</Button>\n            </div>\n        </div>\n    );\n};\n\nconst Message: FC<{ message: ChatMessageType }> = ({message}) => {\n    return (\n        <div>\n            <img src={message.photo} style={{width: '40px'}} alt=\"ava\"/>\n            <Link to={`/profile/${message.userId}`}>{message.userName} </Link>\n            <br/>\n            {message.message}\n            <hr/>\n        </div>\n    );\n};\n\nexport default ChatPage\n"],"sourceRoot":""}