{"version":3,"sources":["assets/images/preloader.gif","components/common/Preloader/Preloader.tsx","components/Users/Users.module.css","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","components/Navbar/Friends/Friends.module.css","api/profile-api.ts","redux/profile-reducer.ts","api/api.ts","redux/dialogs-reducer.ts","assets/images/avatar-placeholder.png","components/Header/Header.module.css","reportWebVitals.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Navbar/Friends/Friends.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControl/FormsControl.module.css","components/common/FormsControl/FormsControl.tsx"],"names":["Preloader","src","preloaderImg","alt","module","exports","required","value","maxLengthCreator","maxLength","length","profileAPI","userId","instance","get","then","response","data","text","put","status","profile","photo","formData","FormData","append","headers","initialState","posts","id","message","like_count","newPostText","profileActions","addPostActionCreator","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photosUrl","getUserProfileData","dispatch","a","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","saveAvatarPhoto","photos","saveProfile","getState","auth","Error","messages","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","Math","floor","random","filter","p","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","dialogs","name","dialogsActions","sendMessage","newMessageBody","dialogsReducer","body","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","authAPI","res","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaURL","actions","payload","getAuthUserData","getCaptchaURL","url","logout","authReducer","LoginPage","useSelector","useDispatch","to","LoginReduxForm","onSubmit","console","log","CaptchaIsRequired","reduxForm","form","handleSubmit","error","Field","placeholder","component","InputComponent","validate","style","padding","className","s","formSummaryError","initialized","appReducer","qwe","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","usersAPI","getUsers","currentPage","pageSize","term","friend","unfollow","follow","users","totalUsersCount","isFetching","followingInProgress","usersActions","totalCount","requestUsers","page","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","usersPage","sidebar","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","Paginator","onPageChanged","totalItemsCount","pagesCount","ceil","pages","Array","fill","e","index","halfRange","sliceRange","sliceStart","slice","nextChunk","step","paginator","onClick","cn","selectedPage","pageNumber","User","user","followingProgress","small","userPhoto","disabled","some","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getIsFollowingInProgress","getFilter","userSearchFormValidate","values","UsersSearchForm","React","memo","onFilterChanged","enableReinitialize","initialValues","setSubmitting","isSubmitting","as","Users","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","String","push","pathname","onFollow","bind","onUnfollow","pNum","UsersPage","Friends","friends","images","selectIsAuth","selectCurrentUserLogin","selectCurrentUserId","AppHeader","Header","Layout","header","span","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","App","promise","reason","this","initializeApp","addEventListener","catchAllUnhandledErrors","removeEventListener","theme","mode","defaultSelectedKeys","margin","Item","width","defaultOpenKeys","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","pageTitle","textAlign","Component","AppContainer","withRouter","connect","all","MainApp","ReactDOM","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps"],"mappings":"6HAAe,MAA0B,sC,OCQ1BA,IAJC,WACZ,OAAO,qBAAKC,IAAKC,EAAcC,IAAI,c,oBCJvCC,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,sB,oBCA9DD,EAAOC,QAAU,CAAC,aAAe,gCAAgC,UAAY,6BAA6B,WAAa,gC,iCCEvH,oEAAO,IAAMC,EAA+B,SAACC,GACzC,IAAIA,EAGJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,GAASA,EAAMG,OAASD,EACxB,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCZRL,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,ySCMjDM,EAAa,SAEPC,GACX,OAAOC,IAASC,IAAT,kBAAkCF,IACpCG,MAAK,SAAAC,GACF,OAAOA,EAASC,SALnBN,EAAa,SASZC,GACN,OAAOC,IAASC,IAAT,yBAAuCF,IACzCG,MAAK,SAAAC,GACF,OAAOA,EAASC,SAZnBN,EAAa,SAgBTO,GACT,OAAOL,IAASM,IAAT,kBAAiD,CAACC,OAAQF,IAC5DH,MAAK,SAAAC,GACF,OAAOA,EAASC,SAnBnBN,EAAa,SAuBVU,GACR,OAAOR,IAASM,IAAT,WAA0CE,GAC5CN,MAAK,SAAAC,GACF,OAAOA,EAASC,SA1BnBN,EAAa,SA8BNW,GACZ,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBT,IAASM,IAAT,iBAA2EI,EAAU,CACxFG,QAAS,CACL,eAAgB,yBAErBX,MAAK,SAAAC,GACJ,OAAOA,EAASC,SCtCxBU,EAAe,CACfC,MAAO,CACH,CAACC,GAAI,EAAGC,QAAS,yEAAmBC,WAAY,IAChD,CAACF,GAAI,EAAGC,QAAS,mFAAmBC,WAAY,KAEpDV,QAAS,KACTD,OAAQ,GACRY,YAAa,IA4CJC,EAAiB,CAC1BC,qBAAsB,SAACF,GAAD,MAA0B,CAACG,KAAM,mBAAoBH,gBAC3EI,eAAgB,SAACf,GAAD,MAAwB,CAACc,KAAM,2BAA4Bd,YAC3EgB,UAAW,SAACjB,GAAD,MAAqB,CAACe,KAAM,qBAAsBf,WAC7DkB,WAAY,SAACC,GAAD,MAAqB,CAACJ,KAAM,sBAAuBI,WAC/DC,iBAAkB,SAACC,GAAD,MAAyB,CAACN,KAAM,6BAA8BM,eAKvEC,EAAqB,SAAC9B,GAAD,8CAA+B,WAAO+B,GAAP,eAAAC,EAAA,sEACxCjC,EAA0BC,GADc,OACzDI,EADyD,OAE7D2B,EAASV,EAAeG,eAAepB,IAFsB,2CAA/B,uDAMrB6B,EAAY,SAACjC,GAAD,8CAA+B,WAAO+B,GAAP,eAAAC,EAAA,sEAC/BjC,EAAqBC,GADU,OAChDI,EADgD,OAEpD2B,EAASV,EAAeI,UAAUrB,IAFkB,2CAA/B,uDAMZ8B,EAAe,SAAC1B,GAAD,8CAA+B,WAAOuB,GAAP,SAAAC,EAAA,+EAE9BjC,EAAwBS,GAFM,cAGtC2B,aAAeC,IAAgBC,SACxCN,EAASV,EAAeI,UAAUjB,IAJa,uGAA/B,uDAYf8B,EAAkB,SAAC5B,GAAD,8CAA4B,WAAOqB,GAAP,eAAAC,EAAA,sEAClCjC,EAA2BW,GADO,QACnDN,EADmD,QAE1C+B,aAAeC,IAAgBC,SACxCN,EAASV,EAAeO,iBAAiBxB,EAASC,KAAKkC,SAHJ,2CAA5B,uDAOlBC,EAAc,SAAC/B,GAAD,8CAAkC,WAAOsB,EAAUU,GAAjB,mBAAAT,EAAA,sEACpCjC,EAAuBU,GADa,UACrDL,EADqD,OAEnDJ,EAASyC,IAAWC,KAAK1C,OAC3BI,EAAS+B,aAAeC,IAAgBC,QAHa,oBAIzC,MAARrC,EAJiD,gBAKjD+B,EAASD,EAAmB9B,IALqB,6BAMxC2C,MAAM,qHANkC,uCAQjDzB,EAAUd,EAASwC,SAAS9C,OAAS,EAAIM,EAASwC,SAAS,GAAK,aACpEb,EAASc,YAAW,eAAgB,CAACC,OAAQ5B,KATQ,kBAW9C6B,QAAQC,OAAO9B,IAX+B,4CAAlC,yDAgBZ+B,IA/FQ,WAAgE,IAA/DC,EAA8D,uDAAtDnC,EAAcoC,EAAwC,uCAElF,OAAQA,EAAO5B,MACX,IAAK,mBACD,IAAI6B,EAAU,CACVnC,GAAIoC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBrC,QAASiC,EAAO/B,YAChBD,WAAY,GAEhB,OAAO,2BACA+B,GADP,IAEIlC,MAAM,CAAEoC,GAAH,mBAAeF,EAAMlC,QAC1BI,YAAa,KAErB,IAAK,2BACD,OAAO,2BAAI8B,GAAX,IAAkBzC,QAAS0C,EAAO1C,UACtC,IAAK,qBACD,OAAO,2BAAIyC,GAAX,IAAkB1C,OAAQ2C,EAAO3C,SACrC,IAAK,6BACD,OAAO,2BACA0C,GADP,IAEIzC,QAAQ,2BACDyC,EAAMzC,SADN,IAEH8B,OAAQY,EAAOtB,cAG3B,IAAK,sBACD,OAAO,2BACAqB,GADP,IACclC,MAAOkC,EAAMlC,MAAMwC,QAAO,SAACC,GACjC,OAAOA,EAAExC,KAAOkC,EAAOxB,YAGnC,QACI,OAAOuB,K,sDCrDnB,0GAUYd,EAKAsB,EAfZ,SAGazD,EAHb,OAGwB0D,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACThD,QAAS,CAAC,UAAW,2C,SAIbsB,O,qBAAAA,I,kBAAAA,M,cAKAsB,O,2CAAAA,M,4FCZR3C,EAAe,CACf6B,SAAU,CACN,CAAC3B,GAAI,EAAGC,QAAS,6BACjB,CAACD,GAAI,EAAGC,QAAS,6BACjB,CAACD,GAAI,EAAGC,QAAS,8BAErB6C,QAAS,CACL,CAAC9C,GAAI,EAAG+C,KAAM,YACd,CAAC/C,GAAI,EAAG+C,KAAM,UACd,CAAC/C,GAAI,EAAG+C,KAAM,QACd,CAAC/C,GAAI,EAAG+C,KAAM,cAsBTC,EAAiB,CAC1BC,YAAa,SAACC,GAAD,MAA6B,CAAC5C,KAAM,uBAAwB4C,oBAI9DC,IAnBe,WAAgE,IAA/DlB,EAA8D,uDAAtDnC,EAAcoC,EAAwC,uCACzF,OAAQA,EAAO5B,MACX,IAAK,uBACD,IAAI8C,EAAOlB,EAAOgB,eAClB,OAAO,2BACAjB,GADP,IAEIN,SAAS,GAAD,mBAAMM,EAAMN,UAAZ,CACJ,CAAC3B,GAAIoC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAiBrC,QAASmD,OAE3D,QACI,OAAOnB,K,iCC/BJ,QAA0B,gD,oBCCzC1D,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,yECWhD6E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrE,MAAK,YAAkD,IAA/CsE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,yLCQDO,EAAU,WAGf,OAAO7E,IAASC,IAAT,WACFC,MAAK,SAAA4E,GAAG,OAAIA,EAAI1E,SAJhByE,EAAU,SAObE,EAAsBC,GAA6E,IAApDC,EAAmD,wDAA/BC,EAA+B,uDAAN,KAC9F,OAAOlF,IAASmF,KAAT,aAAgH,CAACJ,QAAOC,WAAUC,aAAYC,YAChJhF,MAAK,SAAA4E,GAAG,OAAIA,EAAI1E,SAThByE,EAAU,WAaf,OAAO7E,IAASoF,OAAT,cACFlF,MAAK,SAAA4E,GAAG,OAAIA,EAAI1E,SCrBhBiF,EAAc,WAGnB,OAAOrF,IAASC,IAAT,4BACFC,MAAK,SAAAC,GACF,OAAOA,EAASC,SCN5BU,EAAe,CACff,OAAQ,KACRgF,MAAO,KACPO,MAAO,KACPC,QAAQ,EACRC,WAAY,MAoBHC,EAEQ,SAAC1F,EAAuBgF,EAAsBO,EAAsBC,GAApE,MAAyF,CACtGjE,KAAM,qBACNoE,QAAS,CAAC3F,SAAQgF,QAAOO,QAAOC,YAJ3BE,EAOa,SAACD,GAAD,MAAgC,CAClDlE,KAAM,+BACNoE,QAAS,CAACF,gBAMLG,EAAkB,yDAAiB,WAAO7D,GAAP,uBAAAC,EAAA,sEAEvB8C,IAFuB,QAExC1E,EAFwC,QAG/B+B,aAAeC,IAAgBC,UAAU,EACzBjC,EAASC,KAA7BY,EAD4C,EAC5CA,GAAIsE,EADwC,EACxCA,MAAOP,EADiC,EACjCA,MAChBjD,EAAS2D,EAAwBzE,EAAI+D,EAAOO,GAAO,KALX,2CAAjB,uDAwBlBM,EAAgB,yDAAiB,WAAO9D,GAAP,iBAAAC,EAAA,sEACrBsD,IADqB,OACtClF,EADsC,OAEpCqF,EAAarF,EAAS0F,IAC5B/D,EAAS2D,EAA6BD,IAHI,2CAAjB,uDAOhBM,EAAS,yDAAiB,WAAOhE,GAAP,SAAAC,EAAA,sEAEd8C,IAFc,cAGtB3C,aAAeC,IAAgBC,SACxCN,EAAS2D,EAAwB,KAAM,KAAM,MAAM,IAJpB,2CAAjB,uDASPM,EApEK,WAA+E,IAA9E9C,EAA6E,uDAAtDnC,EAAcoC,EAAwC,uCAC9F,OAAQA,EAAO5B,MACX,IAAK,qBACL,IAAK,+BACD,OAAO,2BACA2B,GACAC,EAAOwC,SAElB,QACI,OAAOzC,I,wBCoBN+C,EAAgB,WACzB,IAAMR,EAAaS,aAAY,SAAChD,GAAD,OAAyBA,EAAMR,KAAK+C,cAC7DD,EAASU,aAAY,SAAChD,GAAD,OAAyBA,EAAMR,KAAK8C,UAEzDzD,EAAWoE,cAMjB,OAAIX,EACO,cAAC,IAAD,CAAUY,GAAI,aAGrB,gCACI,wCACA,cAACC,EAAD,CAAgBC,SAVP,SAAC3F,GDGD,IAACqE,EAAsBC,EAAyBC,EAAqBC,ECFlFoB,QAAQC,IAAI7F,GACZoB,GDCciD,ECDCrE,EAASqE,MDCYC,ECDLtE,EAASsE,SDCqBC,ECDXvE,EAASuE,WDCuBC,ECDXxE,EAASwE,QDCnE,uCAA2G,WAAOpD,GAAP,iBAAAC,EAAA,sEAEvG8C,EAAcE,EAAOC,EAAUC,EAAYC,GAF4D,QAExH/E,EAFwH,QAG/G+B,aAAeC,IAAgBC,QACxCN,EAAS6D,KACFxF,EAAS+B,aAAeuB,IAAyB+C,kBACxD1E,EAAS8D,MAEL3E,EAAUd,EAASwC,SAAS9C,OAAS,EAAIM,EAASwC,SAAW,aACjEb,EAASc,YAAW,QAAS,CAACC,OAAQ5B,MATkF,2CAA3G,yDCO2BuE,WAAYA,QAKtDY,EAAiBK,YAAkD,CAACC,KAAM,SAAzDD,EAvDoF,SAAC,GAIO,IAHHE,EAGE,EAHFA,aACAC,EAEE,EAFFA,MACApB,EACE,EADFA,WAE5G,OACI,uBAAMa,SAAUM,EAAhB,UACI,8BAAK,cAACE,EAAA,EAAD,CAAOC,YAAa,QAAS/C,KAAM,QAAStE,UAAU,EAAMsH,UAAWC,IAChEC,SAAU,CAACxH,SACvB,8BAAK,cAACoH,EAAA,EAAD,CAAOC,YAAa,OAAQxF,KAAK,WAAW7B,UAAU,EAAMsE,KAAM,WAC3DgD,UAAWC,IAAgBC,SAAU,CAACxH,SAClD,gCAAK,cAACoH,EAAA,EAAD,CAAOvF,KAAK,WAAWyC,KAAM,aAAcgD,UAAW,UAA3D,iBACCvB,GAAc,qBAAKpG,IAAKoG,EAAYlG,IAAI,YACxCkG,GACD,8BAAK,cAACqB,EAAA,EAAD,CAAOC,YAAa,UAAWrH,UAAU,EAAMsE,KAAM,UAC9CgD,UAAWC,QACtBJ,GAAS,qBAAKM,MAAO,CAACC,QAAS,UAAtB,SACN,sBAAMC,UAAWC,IAAEC,iBAAnB,SAAsCV,MAE1C,8BACI,mD,QC9BZ9F,EAAe,CACfyG,aAAa,GAoBJ9B,EACc,iBAAO,CAACnE,KAAM,4BAkB1BkG,EAhCI,WAA+D,IAA9DvE,EAA6D,uDAArDnC,EAAcoC,EAAuC,uCAC7E,OAAQA,EAAO5B,MACX,IAAK,0BACD,OAAO,2BACA2B,GADP,IAEIsE,aAAa,IAErB,QACI,OAAOtE,I,2BCpBfnC,EAAe,CACf2G,IAAK,KAiBMC,EAZQ,WAAuD,IAAtDzE,EAAqD,uDAA7CnC,EAAcoC,EAA+B,uCACzE,OAAQA,EAAO5B,MACX,IAAK,MACD,OAAO,2BACA2B,GADP,IAEIwE,IAAKxE,EAAMwE,IAAM,IAEzB,QACI,OAAOxE,I,QCdN0E,EAAsB,SAACC,EAAYC,EAAaC,EAAkBC,GAC3E,OAAOH,EAAMI,KAAI,SAACC,GACd,OAAOA,EAAEH,KAAiBD,EAAnB,2BAAgCI,GAAMF,GAAeE,MCCvDC,EAAW,CAEpBC,SAFoB,WAE+D,IAA1EC,EAAyE,uDAA3D,EAAGC,EAAwD,uDAA7C,EAAGC,EAA0C,uDAAnC,GAAIC,EAA+B,wDAC9E,OAAOvI,IAASC,IAAT,sBACYmI,EADZ,kBACiCC,EADjC,iBACkDC,EADlD,mBACiEC,IACnErI,MAAK,SAAAC,GACF,OAAOA,EAASC,SAI5BoI,SAVoB,SAUXzI,GACL,OAAOC,IAASoF,OAAT,iBAA0BrF,IAC5BG,MAAK,SAAAC,GACF,OAAOA,EAASC,SAI5BqI,OAjBoB,SAiBb1I,GACH,OAAOC,IAASmF,KAAT,iBAAyCpF,IAC3CG,MAAK,SAAAC,GACF,OAAOA,EAASC,UCf5BU,EAAe,CACf4H,MAAO,GACPL,SAAU,EACVM,gBAAiB,EACjBP,YAAa,EACbQ,YAAY,EACZrF,OAAQ,CAAC+E,KAAM,GAAIC,OAAQ,MAC3BM,oBAAqB,IA4CZC,GACM,SAAC/I,GAAD,MAAqB,CAACuB,KAAM,eAAgBvB,WADlD+I,GAEQ,SAAC/I,GAAD,MAAqB,CAACuB,KAAM,iBAAkBvB,WAFtD+I,GAGC,SAACJ,GAAD,MAA0B,CAACpH,KAAM,kBAAmBoH,UAHrDI,GAIO,SAACV,GAAD,MAA0B,CAAC9G,KAAM,yBAA0B8G,gBAJlEU,GAKE,SAACvF,GAAD,MAAsB,CAACjC,KAAM,mBAAoBoE,QAASnC,IAL5DuF,GAMW,SAACC,GAAD,MAAyB,CAACzH,KAAM,8BAA+ByH,eAN1ED,GAOS,SAACF,GAAD,MAA0B,CAACtH,KAAM,2BAA4BsH,eAPtEE,GAQgB,SAACF,EAAqB7I,GAAtB,MAA0C,CAC/DuB,KAAM,qCACNsH,aACA7I,WAKKiJ,GAAe,SAACC,EAAcZ,EAAkB9E,GAAjC,8CAAgE,WAAOzB,GAAP,eAAAC,EAAA,6DACxFD,EAASgH,IAA8B,IACvChH,EAASgH,GAA4BG,IACrCnH,EAASgH,GAAuBvF,IAHwD,SAInE2E,EAASC,SAASc,EAAMZ,EAAU9E,EAAO+E,KAAM/E,EAAOgF,QAJa,OAIpFpI,EAJoF,OAKxF2B,EAASgH,IAA8B,IACvChH,EAASgH,GAAsB3I,EAASyH,QACxC9F,EAASgH,GAAgC3I,EAAS4I,aAPsC,2CAAhE,uDAUtBG,GAAmB,uCAAG,WAAOpH,EACA/B,EACAoJ,EACAC,GAHP,SAAArH,EAAA,6DAIxBD,EAASgH,IAAqC,EAAM/I,IAJ5B,SAKHoJ,EAAUpJ,GALP,OAMI,IANJ,OAMXmC,YACTJ,EAASsH,EAAcrJ,IAE3B+B,EAASgH,IAAqC,EAAO/I,IAT7B,2CAAH,4DAuBVsJ,GAtFM,WAAgE,IAA/DpG,EAA8D,uDAAtDnC,EAAcoC,EAAwC,uCAChF,OAAQA,EAAO5B,MACX,IAAK,eACD,OAAO,2BACA2B,GADP,IAEIyF,MAAOf,EAAoB1E,EAAMyF,MAAOxF,EAAOnD,OAAQ,KAAM,CAACuJ,UAAU,MAEhF,IAAK,iBACD,OAAO,2BACArG,GADP,IAEIyF,MAAOf,EAAoB1E,EAAMyF,MAAOxF,EAAOnD,OAAQ,KAAM,CAACuJ,UAAU,MAEhF,IAAK,kBACD,OAAO,2BAAIrG,GAAX,IAAkByF,MAAOxF,EAAOwF,QACpC,IAAK,yBACD,OAAO,2BAAIzF,GAAX,IAAkBmF,YAAalF,EAAOkF,cAC1C,IAAK,8BACD,OAAO,2BAAInF,GAAX,IAAkB0F,gBAAiBzF,EAAO6F,aAC9C,IAAK,2BACD,OAAO,2BAAI9F,GAAX,IAAkB2F,WAAY1F,EAAO0F,aACzC,IAAK,mBACD,OAAO,2BAAI3F,GAAX,IAAkBM,OAAQL,EAAOwC,UACrC,IAAK,qCACD,OAAO,2BACAzC,GADP,IAEI4F,oBAAqB3F,EAAO0F,WAAP,sBACX3F,EAAM4F,qBADK,CACgB3F,EAAOnD,SACtCkD,EAAM4F,oBAAoBtF,QAAO,SAAAvC,GAAE,OAAIA,IAAOkC,EAAOnD,YAEnE,QACI,OAAOkD,I,oBC1CfsG,GAAcC,YAAgB,CAC9BC,YAAazG,IACb0G,YAAavF,IACbwF,UAAWN,GACXO,QAASlC,EACTjF,KAAMsD,EACN8D,IAAKrC,EACLd,KAAMoD,OAYJC,GAAmBC,OAAOC,sCAAwCC,IAElEC,GAAQC,YAAYb,GAAaQ,GAAiBM,YAAgBC,QAGxEN,OAAOO,UAAYJ,GACJA,UC/BR,SAASK,GAAkBC,GAE9B,OAAO,SAACC,GACJ,OACI,cAAC,IAAMC,SAAP,CAAgBC,SAAU,kGAA1B,SACI,cAACH,EAAD,eAAsBC,O,2ECwCvBG,GArCwB,SAAC,GAA6D,IAA5DzC,EAA2D,EAA3DA,YAAa0C,EAA8C,EAA9CA,cAAeC,EAA+B,EAA/BA,gBAAiB1C,EAAc,EAAdA,SAC9E2C,EAAqB5H,KAAK6H,KAAKF,EAAkB1C,GACjD6C,EAAuBC,MAAMH,GAAYI,KAAK,GAAGpD,KAAI,SAACqD,EAAGC,GAAJ,OAAcA,EAAQ,KAEzEC,EAAYnI,KAAK6H,KAAKO,KACxBC,EAAarD,GAAemD,EAAY,EAAInD,EAAcmD,EAC9DL,EAAQA,EAAMQ,MAAMD,EAAYrD,EAAcmD,GAE9C,IAAMI,EAAY,SAACC,GAEXd,EADC1C,EAAcwD,EAAQZ,EACTA,EAAaO,EACnBnD,EAAcwD,EAAQ,EAChBL,EAEAnD,EAAcwD,IAKpC,OAAO,sBAAKxE,UAAWC,KAAEwE,UAAlB,UACFzD,EAAc,KAAO,uBAAM0D,QAAS,kBAAMH,GAAW,MAAhC,UAAuC,OAAvC,UACrBvD,EAAc,IAAM,uBAAM0D,QAAS,kBAAMH,GAAW,KAAhC,UAAsC,MAAtC,kBACpBT,EAAMlD,KAAI,SAACxE,GACR,OAAO,uBACHsI,QAAS,kBAAMhB,EAActH,IAC7B4D,UAAW2E,KAAG,gBAAE1E,KAAE2E,aAAe5D,IAAgB5E,GAC7C6D,KAAE4E,YAHH,cAKJzI,EALI,MAIEA,MAIZ4E,EAAc,GAAK4C,GAAc,uBAAMc,QAAS,kBAAMH,EAAU,KAA/B,yBAAuD,MAAvD,UACjCvD,EAAc,IAAM4C,GAAc,sBAAMc,QAAS,kBAAMH,EAAU,MAA/B,SAAsC,a,UCclEO,GA3Ca,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,KAAM1D,EAAyC,EAAzCA,OAAQD,EAAiC,EAAjCA,SAAU4D,EAAuB,EAAvBA,kBAElD,OACI,gCACI,iCACI,8BACI,cAAC,IAAD,CAASjG,GAAI,YAAcgG,EAAKnL,GAAhC,SACI,qBAAK5B,IAA0B,MAArB+M,EAAK7J,OAAO+J,MAAgBF,EAAK7J,OAAO+J,MAAQC,KAAWhN,IAAI,SACpE8H,UAAWC,KAAEiF,gBAG1B,8BACKH,EAAK7C,SACA,wBACEiD,SAAUH,EAAkBI,MAAK,SAAAxL,GAAE,OAAIA,IAAOmL,EAAKnL,MACnD8K,QAAS,WACLtD,EAAS2D,EAAKnL,KAHpB,sBAOA,wBACEuL,SAAUH,EAAkBI,MAAK,SAAAxL,GAAE,OAAIA,IAAOmL,EAAKnL,MACnD8K,QAAS,WACLrD,EAAO0D,EAAKnL,KAHlB,yBAUd,iCACI,8BAAMmL,EAAKpI,OACX,8BAAMoI,EAAK5L,YAEf,iCACI,8BAAM,uBACN,8BAAM,iC,SCjDT4H,GAAW,SAAClF,GACrB,OAAOA,EAAM0G,UAAUjB,OAGd+D,GAAc,SAACxJ,GACxB,OAAOA,EAAM0G,UAAUtB,UAGdqE,GAAqB,SAACzJ,GAC/B,OAAOA,EAAM0G,UAAUhB,iBAGdgE,GAAiB,SAAC1J,GAC3B,OAAOA,EAAM0G,UAAUvB,aAGdwE,GAAgB,SAAC3J,GAC1B,OAAOA,EAAM0G,UAAUf,YAGdiE,GAA2B,SAAC5J,GACrC,OAAOA,EAAM0G,UAAUd,qBAGdiE,GAAY,SAAC7J,GACtB,OAAOA,EAAM0G,UAAUpG,QCrBrBwJ,GAAyB,SAACC,GAS5B,MARoB,IAeXC,GAAiCC,IAAMC,MAAK,YAAwB,IAAtBC,EAAqB,EAArBA,gBACjD7J,EAAS0C,YAAY6G,IAW3B,OAAO,8BACH,cAAC,KAAD,CACIO,oBAAoB,EACpBC,cAAe,CAAChF,KAAM/E,EAAO+E,KAAMC,OAAQhF,EAAOgF,QAClDtB,SAAU8F,GACV1G,SAfO,SAAC2G,EAAD,GAA4C,IAAzBO,EAAwB,EAAxBA,cAE1BhK,EAAkB,CAClB+E,KAAM0E,EAAO1E,KAEbC,OAA0B,SAAlByE,EAAOzE,OAAoB,KAAyB,SAAlByE,EAAOzE,QAErD6E,EAAgB7J,GAChBgK,GAAc,IAGd,SAMK,gBAAEC,EAAF,EAAEA,aAAF,OACG,eAAC,KAAD,WACI,cAAC,KAAD,CAAOlM,KAAK,OAAOyC,KAAK,SACxB,eAAC,KAAD,CAAO0J,GAAG,SAAS1J,KAAK,SAAxB,UACI,wBAAQrE,MAAO,OAAf,gCACA,wBAAQA,MAAO,OAAf,8DACA,wBAAQA,MAAO,QAAf,8EAEJ,wBAAQ4B,KAAK,SAASiL,SAAUiB,EAAhC,6B,UC3BPE,GAA6B,WAEtC,IAAM/E,EAAkB1C,YAAYyG,IAC9BtE,EAAcnC,YAAY0G,IAC1BtE,EAAWpC,YAAYwG,IACvBlJ,EAAS0C,YAAY6G,IACrBpE,EAAQzC,YAAYkC,IACpBiE,EAAoBnG,YAAY4G,IAEhC/K,EAAWoE,cACXyH,EAAUC,cAGhBC,qBAAU,WACN,IAAMC,EAASC,SAAkBJ,EAAQK,SAASC,OAAOC,OAAO,IAE5DC,EAAa/F,EACbgG,EAAe7K,EAOnB,OALMuK,EAAO7E,OAAMkF,EAAaE,OAAOP,EAAO7E,OAGxC6E,EAAOxF,OAAM8F,EAAY,2BAAOA,GAAP,IAAqB9F,KAAMwF,EAAOxF,QAE1DwF,EAAOvF,QACV,IAAK,OACD6F,EAAY,2BAAOA,GAAP,IAAqB7F,OAAQ,OACzC,MACJ,IAAK,OACD6F,EAAY,2BAAOA,GAAP,IAAqB7F,QAAQ,IACzC,MACJ,IAAK,QACD6F,EAAY,2BAAOA,GAAP,IAAqB7F,QAAQ,IAIjDzG,EAASkH,GAAamF,EAAY9F,EAAU+F,MAC7C,IAEHP,qBAAU,WACN,IAAMS,EAAyB,GAEzB/K,EAAO+E,OAAMgG,EAAMhG,KAAO/E,EAAO+E,MACjB,OAAlB/E,EAAOgF,SAAiB+F,EAAM/F,OAASgG,OAAOhL,EAAOgF,SACrC,IAAhBH,IAAmBkG,EAAMrF,KAAOsF,OAAOnG,IAE3CuF,EAAQa,KAAK,CACTC,SAAU,SACVR,OAAQF,aAAsBO,OAEnC,CAAC/K,EAAQ6E,IAEZ,IAQMsG,EAAW,SAAC3O,GACd+B,EPec,SAAC/B,GAAD,8CAA+B,WAAO+B,GAAP,SAAAC,EAAA,sEAC3CmH,GAAoBpH,EAAU/B,EAAQmI,EAASO,OAAOkG,KAAKzG,GAAWY,IAD3B,2CAA/B,sDOfLL,CAAO1I,KAEd6O,EAAa,SAAC7O,GAChB+B,EPiBgB,SAAC/B,GAAD,8CAA+B,WAAO+B,GAAP,SAAAC,EAAA,sEAC7CmH,GAAoBpH,EAAU/B,EAAQmI,EAASM,SAASmG,KAAKzG,GAAWY,IAD3B,2CAA/B,sDOjBPN,CAASzI,KAGtB,OACI,gCACI,cAACkN,GAAD,CAAiBG,gBAbD,SAAC7J,GACrBzB,EAASkH,GAAa,EAAGX,EAAU9E,OAa/B,qBAAK6D,UAAWC,KAAEwH,KAAlB,SAEI,cAAC,GAAD,CAAW9D,gBAAiBpC,EACjBP,YAAaA,EACb0C,cAtBD,SAACmB,GACnBnK,EAASkH,GAAaiD,EAAY5D,EAAU9E,KAsBzB8E,SAAUA,MAGzB,8BACKK,EAAMV,KAAI,SAAAC,GAAC,OAAI,cAAC,GAAD,CAAiBkE,KAAMlE,EAAGQ,OAAQiG,EAAUlG,SAAUoG,EAChDxC,kBAAmBA,GADdnE,EAAEjH,aC3FhC8N,GAAoC,WAE7C,IAAMlG,EAAa3C,YAAY2G,IAE/B,OAAO,qCACEhE,EAAa,cAACzJ,EAAA,EAAD,IAAe,KAC7B,cAAC,GAAD,Q,oGCGG4P,GAhBC,WACZ,OACI,sBAAK3H,UAAWC,KAAE2H,QAAlB,UACI,2CACA,sBAAK5H,UAAWC,KAAE4H,OAAlB,UACI,qBAAK7P,IAAG,uCAAkCgE,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkBhE,IAAK,QACjF,qBAAKF,IAAG,uCAAkCgE,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkBhE,IAAK,QACjF,qBAAKF,IAAG,uCAAkCgE,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkBhE,IAAK,QACjF,qBAAKF,IAAG,uCAAkCgE,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkBhE,IAAK,QACjF,qBAAKF,IAAG,uCAAkCgE,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkBhE,IAAK,QACjF,qBAAKF,IAAG,uCAAkCgE,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkBhE,IAAK,e,mDCXpF4P,GAAe,SAACjM,GACzB,OAAOA,EAAMR,KAAK8C,QAET4J,GAAyB,SAAClM,GACnC,OAAOA,EAAMR,KAAK6C,OAET8J,GAAsB,SAACnM,GAChC,OAAOA,EAAMR,KAAK1C,QCsCPsP,GAnCiB,SAAC3E,GAAW,IACjC4E,EAAUC,KAAVD,OACD/J,EAASU,YAAYiJ,IACrB5J,EAAQW,YAAYkJ,IACpBpP,EAASkG,YAAYmJ,IAErBtN,EAAWoE,cAMjB,OACI,cAACoJ,EAAD,CAAQlI,UAAWC,KAAEmI,OAArB,SAEI,eAAC,KAAD,WACI,cAAC,KAAD,CAAKC,KAAM,GAAX,SACI,qBAAKnQ,IAAI,OAAOF,IAAK,sCAEzB,eAAC,KAAD,CAAKqQ,KAAM,EAAX,UACI,cAAC,KAAD,CAAQvI,MAAO,CAACwI,gBAAiB,WAAYC,KAAM,cAACC,GAAA,EAAD,MAClDrK,EACK,eAAC,IAAD,CAAMY,GAAE,mBAAcpG,GAAtB,UACGuF,EACD,cAAC,KAAD,CAAQwG,QAhBV,WAClBhK,EAASgE,MAeW,uBAEF,cAAC,IAAD,CAAMK,GAAI,SAAV,4BCpBnB0J,GAAWC,KAAXD,QACAP,GAAkCC,KAAlCD,OAAQS,GAA0BR,KAA1BQ,QAASC,GAAiBT,KAAjBS,OAAQC,GAASV,KAATU,MAG1BC,GAAmBhD,IAAMiD,MAAK,kBAAM,iCACpCC,GAAmBlD,IAAMiD,MAAK,kBAAM,iCACpCE,GAAWnD,IAAMiD,MAAK,kBAAM,uDAK5BG,G,6KAEF,SAAwBC,GACpBjK,QAAQC,IAAI,qBAAsBgK,EAAQC,U,+BAG9C,WACIC,KAAK/F,MAAMgG,gBACX1G,OAAO2G,iBAAiB,qBAAsBF,KAAKG,2B,kCAGvD,WACI5G,OAAO6G,oBAAoB,qBAAsBJ,KAAKG,2B,oBAG1D,WACI,OAAKH,KAAK/F,MAAMnD,YAKZ,eAAC,KAAD,WACI,eAAC,GAAD,CAAQH,UAAU,SAAlB,UACI,qBAAKA,UAAU,SACf,cAAC,KAAD,CAAM0J,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,OAG3D,cAAC,GAAD,OAEJ,eAACjB,GAAD,CAAS7I,MAAO,CAACC,QAAS,UAA1B,UACI,eAAC,KAAD,CAAYD,MAAO,CAAC+J,OAAQ,UAA5B,UACI,cAAC,KAAWC,KAAZ,mBACA,cAAC,KAAWA,KAAZ,mBACA,cAAC,KAAWA,KAAZ,qBAEJ,eAAC,KAAD,CAAQ9J,UAAU,yBAAyBF,MAAO,CAACC,QAAS,UAA5D,UACI,cAAC8I,GAAD,CAAO7I,UAAU,yBAAyB+J,MAAO,IAAjD,SACI,eAAC,KAAD,CACIJ,KAAK,SACLC,oBAAqB,CAAC,KACtBI,gBAAiB,CAAC,QAClBlK,MAAO,CAACmK,OAAQ,QAJpB,UAOI,eAACxB,GAAD,CAAoBF,KAAM,cAACC,GAAA,EAAD,IAAiB0B,MAAM,gEAAjD,UACI,cAAC,KAAKJ,KAAN,UAAmB,cAAC,IAAD,CAAM/K,GAAI,WAAV,yDAAJ,KACf,cAAC,KAAK+K,KAAN,UAAmB,cAAC,IAAD,CAAM/K,GAAI,WAAV,yDAAJ,OAFN,QAIb,cAAC0J,GAAD,CAAoBF,KAAM,cAAC4B,GAAA,EAAD,IAAmBD,MAAM,2EAAnD,SACI,cAAC,KAAKJ,KAAN,UAAmB,cAAC,IAAD,CAAM/K,GAAI,SAAV,yDAAJ,MADN,QAGb,cAAC0J,GAAD,CAAoBF,KAAM,cAAC4B,GAAA,EAAD,IAAmBD,MAAM,qBAAnD,SACI,cAAC,KAAKJ,KAAN,UAAmB,cAAC,IAAD,CAAM/K,GAAI,QAAV,iCAAJ,MADN,QAGb,eAAC0J,GAAD,CAAoBF,KAAM,cAAC6B,GAAA,EAAD,IAAyBF,MAAM,MAAzD,UACI,cAAC,KAAKJ,KAAN,UAAmB,cAAC,IAAD,CAAM/K,GAAI,QAAV,mBAAJ,KACf,cAAC,KAAK+K,KAAN,UAAoB,cAAC,IAAD,CAAM/K,GAAI,SAAV,oBAAL,MACf,cAAC,KAAK+K,KAAN,UAAoB,cAAC,IAAD,CAAM/K,GAAI,YAAV,uBAAL,QAHN,QAKb,cAAC,GAAD,SAGR,cAAC4J,GAAD,CAAS7I,MAAO,CAACC,QAAS,SAAUsK,UAAW,KAA/C,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQpH,GAAkB4F,MAClD,cAAC,IAAD,CAAOuB,KAAM,SAAUC,OAAQ,kBAAM,cAAC,EAAD,OACrC,cAAC,IAAD,CAAOD,KAAM,QAASC,OAAQpH,GAAa6F,MAC3C,cAAC,IAAD,CAAOsB,KAAM,WAAYC,OAAQpH,GAAkB0F,MACnD,cAAC,IAAD,CAAOyB,KAAM,oBAAqBC,OAAQpH,GAAkB4F,MAC5D,cAAC,IAAD,CAAOuB,KAAM,SAAUC,OAAQ,kBAAM,cAAC,GAAD,CAAWC,UAAW,eAC3D,cAAC,IAAD,CAAOF,KAAM,IAAKC,OAAQ,kBAAM,uCAAS,cAAC,KAAD,CAAQtQ,KAAM,UAAd,iCAKzD,cAAC0O,GAAD,CAAQ9I,MAAO,CAAC4K,UAAW,UAA3B,4CA1DG,cAAC3S,EAAA,EAAD,Q,GAjBD4S,aAsFdC,GAAe9H,YACf+H,IACAC,aAPkB,SAACjP,GAAD,MAA0B,CAC5CsE,YAAatE,EAAM4G,IAAItC,eAME,CAACmJ,chBrFD,WACzB,OAAO,SAAC5O,GACJ,IAAIyO,EAAU,CAACzO,EAAS6D,MACxB7C,QAAQqP,IAAI,CAAC5B,IACRrQ,MAAK,WACF4B,EAAS2D,UgBgFoBK,WAF1BoE,CAGZoG,IAcQ8B,GAZS,WACpB,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAUjI,MAAOA,GAAjB,SAEQ,cAAC6H,GAAD,SCtHpBK,IAAST,OAAO,cAAC,GAAD,IAAYU,SAASC,eAAe,SAOpDlO,K,mBCbA9E,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,uJCU5GgT,EAAuC,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAAS9L,EAAsB,EAAtBA,MAAQ+L,EAAc,EAAdA,SACpEC,EAAWhM,GAAS8L,EAC1B,OACI,sBAAKtL,UAAWC,IAAEwL,YAAc,KAAOD,EAAWvL,IAAET,MAAQ,IAA5D,UACI,8BACK+L,IAEJC,GAAY,+BAAOhM,QAKnBkM,EAAwC,SAACpI,GAAW,IACtDqI,EAAuCrI,EAAvCqI,MAA0BC,GAAatI,EAAhC+H,KAAgC/H,EAA1BiI,SADwC,YACdjI,EADc,8BAE5D,OAAQ,cAAC8H,EAAD,2BAAiB9H,GAAjB,aAAwB,oDAAcqI,GAAWC,QAGhDhM,EAA8C,SAAC0D,GAAW,IAC5DqI,EAAuCrI,EAAvCqI,MAA0BC,GAAatI,EAAhC+H,KAAgC/H,EAA1BiI,SAD8C,YACpBjI,EADoB,8BAElE,OAAQ,cAAC8H,EAAD,2BAAiB9H,GAAjB,aAAwB,iDAAWqI,GAAWC,U","file":"static/js/main.657f723e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.0b5d9161.gif\";","import React from 'react'\nimport preloaderImg from '../../../assets/images/preloader.gif'\n\n\nlet Preloader = () => {\n    return <img src={preloaderImg} alt='loading' />\n}\n\nexport default Preloader\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__17MJB\",\"pNum\":\"Users_pNum__OJC9-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3SIki\",\"paginator\":\"Paginator_paginator__18P4_\",\"pageNumber\":\"Paginator_pageNumber__xOsKi\"};","export type FieldValidatorType = (value: string) => string | undefined\n\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) {\n        return undefined\n    }\n    return 'Field is required'\n\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value && value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`\n    }\n    return undefined\n\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"Friends_friends__1-Zf7\",\"images\":\"Friends_images__2QqNV\"};","import {PhotosT, ProfileT} from \"../Types/types\";\nimport {instance, APIResponseType} from \"./api\";\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosT\n}\n\nexport const profileAPI = {\n\n    getProfileData(userId: number) {\n        return instance.get<ProfileT>(`profile/${userId}`,)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/${userId}`,)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    updateStatus(text: string) {\n        return instance.put<APIResponseType>(`profile/status/`, {status: text})\n            .then(response => {\n                return response.data\n            })\n    },\n\n    saveProfile(profile: ProfileT) {\n        return instance.put<APIResponseType>(`profile/`, profile)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    saveAvatarPhoto(photo: File) {\n        const formData = new FormData()\n        formData.append('image', photo)\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo/`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(response => {\n            return response.data\n        })\n\n    },\n\n}\n","import {FormAction, stopSubmit} from \"redux-form\";\nimport {PhotosT, PostT, ProfileT} from \"../Types/types\";\nimport {profileAPI} from \"../api/profile-api\";\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\nimport {ResultCodesEnum} from \"../api/api\";\n\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Привет, ты как?', like_count: 12},\n        {id: 2, message: 'Мой первый пост', like_count: 20},\n    ] as Array<PostT>,\n    profile: null as ProfileT | null,\n    status: '',\n    newPostText: '',\n}\n\nexport type InitialStateT = typeof initialState\n\n\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateT => {\n\n    switch (action.type) {\n        case 'profile/ADD-POST':\n            let newPost = {\n                id: Math.floor(Math.random() * 500),\n                message: action.newPostText,\n                like_count: 0\n            }\n            return {\n                ...state,\n                posts: [newPost, ...state.posts],\n                newPostText: ''\n            }\n        case 'profile/SET_USER_PROFILE':\n            return {...state, profile: action.profile}\n        case 'profile/SET_STATUS':\n            return {...state, status: action.status}\n        case 'profile/SAVE_PHOTO_SUCCESS':\n            return {\n                ...state,\n                profile: {\n                    ...state.profile,\n                    photos: action.photosUrl\n                } as ProfileT\n            }\n        case 'profile/DELETE_POST':\n            return {\n                ...state, posts: state.posts.filter((p) => {\n                    return p.id !== action.postId\n                })\n            }\n        default:\n            return state\n    }\n}\n\ntype ActionsTypes = InferActionsTypes<typeof profileActions>\nexport const profileActions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'profile/ADD-POST', newPostText} as const), //TODO: Эта часть не актуальная, т.к работает через стороннюю либу\n    setUserProfile: (profile: ProfileT) => ({type: 'profile/SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'profile/DELETE_POST', postId} as const),\n    savePhotoSuccess: (photosUrl: PhotosT) => ({type: 'profile/SAVE_PHOTO_SUCCESS', photosUrl} as const),\n}\n\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n\nexport const getUserProfileData = (userId: number): ThunkType => async (dispatch) => {\n    let response = await profileAPI.getProfileData(userId)\n    dispatch(profileActions.setUserProfile(response))\n}\n\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let response = await profileAPI.getStatus(userId)\n    dispatch(profileActions.setStatus(response))\n}\n\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    try {\n        let response = await profileAPI.updateStatus(status)\n        if (response.resultCode === ResultCodesEnum.Success) {\n            dispatch(profileActions.setStatus(status))\n        }\n    } catch (e) {\n        //\n    }\n\n}\n\nexport const saveAvatarPhoto = (photo: File): ThunkType => async (dispatch) => {\n    let response = await profileAPI.saveAvatarPhoto(photo)\n    if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(profileActions.savePhotoSuccess(response.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileT): ThunkType => async (dispatch, getState) => {\n    let response = await profileAPI.saveProfile(profile)\n    const userId = getState().auth.userId\n    if (response.resultCode === ResultCodesEnum.Success) {\n        if (userId!=null) {\n            dispatch(getUserProfileData(userId))\n        } else throw Error('userId не можут быть пустым!')\n    } else {\n        let message = response.messages.length > 0 ? response.messages[0] : 'Some error'\n        dispatch(stopSubmit('edit-profile', {_error: message}))\n        // dispatch(stopSubmit('edit-profile', {contacts: {vk: message}})) //TODO Можно сделать вывод ошибки на конкретное поле формы\n        return Promise.reject(message)\n    }\n}\n\n\nexport default profileReducer\n","import axios from 'axios'\nimport {UserT} from \"../Types/types\";\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {'API-KEY': 'be82d700-54e4-4201-a22e-d509e44f0f71',}\n})\n\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n}\n\nexport enum ResultCodeForCaptchaEnum {\n    CaptchaIsRequired = 10,\n}\n\nexport type GetUsersItems = {\n    items: Array<UserT>\n    totalCount: number\n    error: string | null\n}\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}\n","import {InferActionsTypes} from \"./redux-store\";\nimport {DialogsT, MessagesT} from \"../Types/types\";\n\nlet initialState = {\n    messages: [\n        {id: 1, message: 'нОрм?'},\n        {id: 2, message: 'нОрм.'},\n        {id: 3, message: 'нОрм!'},\n    ] as Array<MessagesT>,\n    dialogs: [\n        {id: 1, name: 'Alexandr'},\n        {id: 2, name: 'Viktor'},\n        {id: 3, name: 'Yuri'},\n        {id: 4, name: 'Vladimir'},\n    ] as Array<DialogsT>,\n}\n\nexport type InitialStateT = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof dialogsActions>\n\n\nexport const dialogsReducer = (state = initialState, action: ActionsTypes): InitialStateT => {\n    switch (action.type) {\n        case 'dialogs/SEND_MESSAGE':\n            let body = action.newMessageBody\n            return {\n                ...state,\n                messages: [...state.messages,\n                    {id: Math.floor(Math.random() * 500), message: body}],\n            }\n        default:\n            return state\n    }\n}\n\nexport const dialogsActions = {\n    sendMessage: (newMessageBody: string) => ({type: 'dialogs/SEND_MESSAGE', newMessageBody} as const)\n}\n\n\nexport default dialogsReducer\n","export default __webpack_public_path__ + \"static/media/avatar-placeholder.05262aba.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\n\n\ntype MeResponseDataType = {\n\n    id: number\n    email: string\n    login: string\n\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\n\nexport const authAPI = {\n\n    me() {\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`,)\n            .then(res => res.data)\n    },\n\n    login(email: string | null, password: string | null, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(res => res.data)\n    },\n\n    logout() {\n        return instance.delete(`auth/login`)\n            .then(res => res.data)\n    },\n\n\n}\n","import {instance} from \"./api\";\n\n\ntype GetCaptchaUrlResponseType = {\n    url:string\n}\n\n\nexport const securityAPI = {\n\n    getCaptchaURL() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`,)\n            .then(response => {\n                return response.data\n            })\n    },\n\n}\n","import {ResultCodesEnum, ResultCodeForCaptchaEnum} from \"../api/api\"\nimport {FormAction, stopSubmit} from \"redux-form\";\nimport {authAPI} from \"../api/auth-api\";\nimport {securityAPI} from \"../api/security-api\";\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\n\n\nlet initialState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaURL: null as string | null,\n}\n\nexport type InitialStateT = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n\nconst authReducer = (state: InitialStateT = initialState, action: ActionsTypes): InitialStateT => {\n    switch (action.type) {\n        case 'auth/SET_USER_DATA':\n        case 'auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'auth/SET_USER_DATA',\n        payload: {userId, email, login, isAuth}\n    } as const),\n\n    getCaptchaURLSuccess: (captchaURL: string | null) => ({\n        type: 'auth/GET_CAPTCHA_URL_SUCCESS',\n        payload: {captchaURL}\n    } as const),\n\n}\n\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n\n    let response = await authAPI.me()\n    if (response.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = response.data\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\n\nexport const login = (email: null | string, password: string | null, rememberMe: boolean, captcha: string | null): ThunkType => async (dispatch) => {\n\n    let response = await authAPI.login(email, password, rememberMe, captcha)\n    if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(getAuthUserData())\n    } else if (response.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\n        dispatch(getCaptchaURL())\n    } else {\n        let message = response.messages.length > 0 ? response.messages : 'Some error'\n        dispatch(stopSubmit('login', {_error: message}))\n    }\n\n}\n\nexport const getCaptchaURL = (): ThunkType => async (dispatch) => {\n    let response = await securityAPI.getCaptchaURL()\n    const captchaURL = response.url\n    dispatch(actions.getCaptchaURLSuccess(captchaURL))\n}\n\n\nexport const logout = (): ThunkType => async (dispatch) => {\n\n    let response = await authAPI.logout()\n    if (response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\n\nexport default authReducer\n","import React, {FC} from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {InputComponent} from \"../common/FormsControl/FormsControl\";\nimport {required} from \"../../utils/validators/validators\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport s from '../common/FormsControl/FormsControl.module.css'\nimport {AppStateType} from \"../../redux/redux-store\";\n\ntype LoginFormOwnProps = {\n    captchaURL: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({\n                                                                                                                handleSubmit,\n                                                                                                                error,\n                                                                                                                captchaURL\n                                                                                                            }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div><Field placeholder={'Email'} name={'email'} required={true} component={InputComponent}\n                        validate={[required]}/></div>\n            <div><Field placeholder={'Pass'} type=\"password\" required={true} name={'password'}\n                        component={InputComponent} validate={[required]}/></div>\n            <div><Field type=\"checkbox\" name={'rememberMe'} component={'input'}/>remember me</div>\n            {captchaURL && <img src={captchaURL} alt=\"captcha\"/>}\n            {captchaURL &&\n            <div><Field placeholder={'captcha'} required={true} name={'captcha'}\n                        component={InputComponent}/></div>}\n            {error && <div style={{padding: '19px 0'}}>\n                <span className={s.formSummaryError}>{error}</span>\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\ntype LoginFormValuesType = {\n    email: null | string\n    password: string | null\n    rememberMe: boolean;\n    captcha: string | null\n}\n\n\nexport const LoginPage: FC = () => {\n    const captchaURL = useSelector((state: AppStateType) => state.auth.captchaURL)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        console.log(formData)\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n    return (\n        <div>\n            <h1>Login </h1>\n            <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL}/>\n        </div>\n    );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\n\n\n","import {getAuthUserData} from \"./auth-reducer\";\nimport {InferActionsTypes} from \"./redux-store\";\nimport {Dispatch} from \"redux\";\n\nlet initialState = {\n    initialized: false\n}\n\nexport type InitialStateT = typeof initialState\n\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateT => {\n    switch (action.type) {\n        case 'app/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true,\n            }\n        default:\n            return state\n    }\n}\n\n\nexport const actions = {\n    setInitializedSuccess: () => ({type: 'app/INITIALIZED_SUCCESS' as const})\n}\n\n\n\n\nexport const initializeApp = () => {\n    return (dispatch: Dispatch<any>) => {\n        let promise = [dispatch(getAuthUserData())]\n        Promise.all([promise])\n            .then(() => {\n                dispatch(actions.setInitializedSuccess())\n            })\n\n    }\n}\n\n\nexport default appReducer\n","let initialState = {\n    qwe: 123\n}\n\ntype InitialStateT = typeof initialState\n\nconst sidebarReducer = (state = initialState, action: any): InitialStateT => {\n    switch (action.type) {\n        case '123':\n            return {\n                ...state,\n                qwe: state.qwe + 1\n            }\n        default:\n            return state\n    }\n}\n\nexport default sidebarReducer\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return items.map((u: any) => {\n        return u[objPropName] === itemId ? {...u, ...newObjProps} : u;\n    })\n}\n","import {APIResponseType, GetUsersItems, instance} from \"./api\";\n\n\nexport const usersAPI = {\n\n    getUsers(currentPage = 1, pageSize = 5, term = '', friend:boolean | null = false) {\n        return instance.get<GetUsersItems>(\n            `/users?page=${currentPage}&count=${pageSize}&term=${term}&friend=${friend}`,)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`,)\n            .then(response => {\n                return response.data\n            })\n    },\n\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`,)\n            .then(response => {\n                return response.data\n            }) as Promise<APIResponseType>\n    }\n}\n","import {updateObjectInArray} from \"../utils/object-helpers\";\nimport {UserT} from \"../Types/types\";\nimport {Dispatch} from \"redux\";\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\nimport {usersAPI} from \"../api/users-api\";\nimport {APIResponseType} from \"../api/api\";\n\n\nlet initialState = {\n    users: [] as Array<UserT>,\n    pageSize: 7,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    filter: {term: '', friend: null as boolean | null},\n    followingInProgress: [] as Array<number>, //array of userId\n}\n\nexport type InitialStateT = typeof initialState\nexport type FilterT = typeof initialState.filter\ntype ThunkType = BaseThunkType<ActionsTypes>\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateT => {\n    switch (action.type) {\n        case 'users/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case 'users/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case 'users/SET_USERS':\n            return {...state, users: action.users}\n        case 'users/SET_CURRENT_PAGE':\n            return {...state, currentPage: action.currentPage}\n        case 'users/SET_TOTAL_USERS_COUNT':\n            return {...state, totalUsersCount: action.totalCount}\n        case 'users/TOGGLE_IS_FETCHING':\n            return {...state, isFetching: action.isFetching}\n        case 'users/SET_FILTER':\n            return {...state, filter: action.payload}\n        case 'users/TOGGLE_IS_FOLLOWING_PROGRESS':\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state\n    }\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof usersActions>\n\nexport const usersActions = {\n    followSuccess: (userId: number) => ({type: 'users/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'users/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserT>) => ({type: 'users/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'users/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterT) => ({type: 'users/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalCount: number) => ({type: 'users/SET_TOTAL_USERS_COUNT', totalCount} as const),\n    toggleIsFetching: (isFetching: boolean) => ({type: 'users/TOGGLE_IS_FETCHING', isFetching} as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'users/TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const),\n}\n\n\nexport const requestUsers = (page: number, pageSize: number, filter: FilterT): ThunkType => async (dispatch) => {\n    dispatch(usersActions.toggleIsFetching(true))\n    dispatch(usersActions.setCurrentPage(page))\n    dispatch(usersActions.setFilter(filter))\n    let response = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n    dispatch(usersActions.toggleIsFetching(false))\n    dispatch(usersActions.setUsers(response.items))\n    dispatch(usersActions.setTotalUsersCount(response.totalCount))\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(usersActions.toggleFollowingProgress(true, userId))\n    let response = await apiMethod(userId)\n    if (response.resultCode === 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(usersActions.toggleFollowingProgress(false, userId))\n}\n\n\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), usersActions.followSuccess)\n}\n\n\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), usersActions.unfollowSuccess)\n}\n\n\nexport default usersReducer\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport sidebarReducer from \"./sidebar-reducer\";\nimport usersReducer from \"./users-reducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\nimport {reducer as formReducer} from \"redux-form\"\nimport appReducer from \"./app-reducer\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    sidebar: sidebarReducer,\n    auth: authReducer,\n    app: appReducer,\n    form: formReducer,\n})\n\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\n\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any) => infer U } ? U : never\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n\n// @ts-ignore\nwindow.__store__ = store\nexport default store\n\n","import React from \"react\";\nimport Preloader from \"../components/common/Preloader/Preloader\";\n\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n\n    return (props: WCP) => {\n        return (\n            <React.Suspense fallback={<div>📡Загрузка...</div>}>\n                <WrappedComponent {...props}/>\n            </React.Suspense>\n        )\n    }\n}\n\n","import React from 'react'\nimport s from './Paginator.module.css'\nimport cn from 'classnames'\n\ntype PropsType = {\n    currentPage: number\n    onPageChanged: (pageNumber: number) => void\n    totalItemsCount: number\n    pageSize: number\n}\n\n\nconst Paginator: React.FC<PropsType> = ({currentPage, onPageChanged, totalItemsCount, pageSize}) => {\n    let pagesCount: number = Math.ceil(totalItemsCount / pageSize)\n    let pages: Array<number> = Array(pagesCount).fill(1).map((e, index) => index + 1)\n    const sliceRange = 5\n    const halfRange = Math.ceil(sliceRange / 2)\n    let sliceStart = currentPage <= halfRange ? 0 : currentPage - halfRange\n    pages = pages.slice(sliceStart, currentPage + halfRange)\n\n    const nextChunk = (step: number) => {\n        if ((currentPage + step) > pagesCount) {\n            onPageChanged(pagesCount - halfRange)\n        } else if ((currentPage + step) < 0) {\n            onPageChanged(halfRange)\n        } else {\n            onPageChanged(currentPage + step)\n        }\n\n    }\n\n    return <div className={s.paginator}>\n        {currentPage > 100 && <span onClick={() => nextChunk(-100)}>{'<100'}&nbsp;</span>}\n        {currentPage > 10 && <span onClick={() => nextChunk(-10)}>{'<10'}&nbsp;&nbsp;&nbsp;</span>}\n        {pages.map((p) => {\n            return <span\n                onClick={() => onPageChanged(p)}\n                className={cn({[s.selectedPage]: currentPage === p},\n                    s.pageNumber)}\n                key={p}\n            > {p} </span>\n\n        })}\n        {currentPage + 10 < pagesCount && <span onClick={() => nextChunk(10)}>&nbsp;&nbsp;&nbsp;{'10>'}&nbsp;</span>}\n        {currentPage + 100 < pagesCount && <span onClick={() => nextChunk(100)}>{'100>'}</span>}\n    </div>\n\n}\n\nexport default Paginator\n","import React, {FC} from 'react'\nimport s from './Users.module.css'\nimport userPhoto from '../../assets/images/avatar-placeholder.png'\nimport {NavLink} from 'react-router-dom'\nimport {UserT} from \"../../Types/types\";\n\n\ntype PropTypes = {\n    user: UserT\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    followingProgress: Array<number>\n}\n\n\nconst User: FC<PropTypes> = ({user, follow, unfollow, followingProgress}) => {\n\n    return (\n        <div>\n            <span>\n                <div>\n                    <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto} alt=\"avatar\"\n                             className={s.userPhoto}/>\n                    </NavLink>\n                </div>\n                <div>\n                    {user.followed\n                        ? <button\n                            disabled={followingProgress.some(id => id === user.id)}\n                            onClick={() => {\n                                unfollow(user.id)\n                            }}>\n                            Unfollow\n                        </button>\n                        : <button\n                            disabled={followingProgress.some(id => id === user.id)}\n                            onClick={() => {\n                                follow(user.id)\n                            }}>\n                            Follow\n                        </button>}\n\n                </div>\n            </span>\n            <span>\n                <div>{user.name}</div>\n                <div>{user.status}</div>\n            </span>\n            <span>\n                <div>{'user.location.city'}</div>\n                <div>{'user.location.country'}</div>\n            </span>\n        </div>\n    )\n}\n\n\nexport default User\n","import {AppStateType} from \"./redux-store\";\n\nexport const getUsers = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getIsFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\n\nexport const getFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n","import {Field, Form, Formik} from \"formik\";\nimport React, {FC} from \"react\";\nimport {FilterT} from \"../../redux/users-reducer\";\nimport {useSelector} from \"react-redux\";\nimport {getFilter} from \"../../redux/users-selectors\";\n\nconst userSearchFormValidate = (values: any) => {\n    const errors: any = {};\n    // if (!values.email) {\n    //     errors.email = 'Required';\n    // } else if (\n    //     !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n    // ) {\n    //     errors.email = 'Invalid email address';\n    // }\n    return errors;\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterT) => void\n}\n\nexport const UsersSearchForm: FC<PropsType> = React.memo(({onFilterChanged}) => {\n    const filter = useSelector(getFilter)\n    const submit = (values: FilterT, {setSubmitting}: any) => {\n\n        let filter: FilterT = {\n            term: values.term,\n            // @ts-ignore\n            friend: values.friend === 'null' ? null : values.friend === 'true'\n        }\n        onFilterChanged(filter)\n        setSubmitting(false)\n    }\n    return <div>\n        <Formik\n            enableReinitialize={true}\n            initialValues={{term: filter.term, friend: filter.friend} as any }\n            validate={userSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n                    <Field as=\"select\" name=\"friend\">\n                        <option value={'null'}>Все</option>\n                        <option value={'true'}>Подписан</option>\n                        <option value={'false'}>Не подписан</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik></div>\n})\n","import React, {useEffect} from 'react'\nimport s from './Users.module.css'\nimport Paginator from \"../common/Paginator/Paginator\";\nimport User from \"./User\";\nimport {UsersSearchForm} from \"./UsersSearchForm\";\nimport * as queryString from 'querystring'\n\nimport {FilterT, follow, requestUsers, unfollow} from \"../../redux/users-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getCurrentPage,\n    getFilter,\n    getIsFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers\n} from \"../../redux/users-selectors\";\nimport {useHistory} from \"react-router\";\n\ntype PropTypes = {}\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\n\nexport const Users: React.FC<PropTypes> = () => {\n\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getFilter)\n    const users = useSelector(getUsers)\n    const followingProgress = useSelector(getIsFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n\n\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch(parsed.friend) {\n            case \"null\":\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case \"true\":\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case \"false\":\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/users',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n\n    const onFilterChanged = (filter: FilterT) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n\n    const onFollow = (userId: number) => {\n        dispatch(follow(userId))\n    }\n    const onUnfollow = (userId: number) => {\n        dispatch(unfollow(userId))\n    }\n\n    return (\n        <div>\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\n            <div className={s.pNum}>\n\n                <Paginator totalItemsCount={totalUsersCount}\n                           currentPage={currentPage}\n                           onPageChanged={onPageChanged}\n                           pageSize={pageSize}\n                />\n            </div>\n            <div>\n                {users.map(u => <User key={u.id} user={u} follow={onFollow} unfollow={onUnfollow}\n                                      followingProgress={followingProgress}/>)}\n            </div>\n        </div>\n    )\n}\n\n\n\n","import React, {FC} from 'react'\nimport {useSelector} from 'react-redux'\nimport {Users} from './Users'\nimport Preloader from '../common/Preloader/Preloader'\nimport {getIsFetching,} from \"../../redux/users-selectors\";\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\nexport const UsersPage: FC<UsersPagePropsType> = () => {\n\n    const isFetching = useSelector(getIsFetching)\n\n    return <>\n            {isFetching ? <Preloader/> : null}\n            <Users/>\n    </>\n}\n\n\n","import React from 'react';\nimport s from './Friends.module.css'\n\nconst Friends = () => {\n    return (\n        <div className={s.friends}>\n            <div>Friends:</div>\n            <div className={s.images}>\n                <img src={`https://i.pravatar.cc/80?img=${Math.floor(Math.random() * 50)}`} alt={'ava'}/>\n                <img src={`https://i.pravatar.cc/80?img=${Math.floor(Math.random() * 50)}`} alt={'ava'}/>\n                <img src={`https://i.pravatar.cc/80?img=${Math.floor(Math.random() * 50)}`} alt={'ava'}/>\n                <img src={`https://i.pravatar.cc/80?img=${Math.floor(Math.random() * 50)}`} alt={'ava'}/>\n                <img src={`https://i.pravatar.cc/80?img=${Math.floor(Math.random() * 50)}`} alt={'ava'}/>\n                <img src={`https://i.pravatar.cc/80?img=${Math.floor(Math.random() * 50)}`} alt={'ava'}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Friends;\n","import {AppStateType} from \"./redux-store\";\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\nexport const selectCurrentUserLogin = (state: AppStateType) => {\n    return state.auth.login\n}\nexport const selectCurrentUserId = (state: AppStateType) => {\n    return state.auth.userId\n}\n\n\n","import React, {FC} from 'react';\nimport {Link, NavLink} from 'react-router-dom';\nimport s from './Header.module.css';\nimport {Avatar, Button, Col, Layout, Row} from \"antd\";\nimport {UserOutlined} from \"@ant-design/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectCurrentUserId, selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\nimport {logout} from \"../../redux/auth-reducer\";\n\ntype PropsType = {\n}\n\nconst AppHeader:FC<PropsType> = (props) => {\n    const {Header} = Layout\n    const isAuth = useSelector(selectIsAuth)\n    const login = useSelector(selectCurrentUserLogin)\n    const userId = useSelector(selectCurrentUserId)\n\n    const dispatch = useDispatch()\n\n    const logoutCallback =() => {\n        dispatch(logout())\n    }\n\n    return (\n        <Header className={s.header}>\n\n            <Row>\n                <Col span={18}>\n                    <img alt='logo' src={'https://svgx.ru/svg/1775543.svg'}/>\n                </Col>\n                <Col span={6}>\n                    <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n                    {isAuth\n                        ? <Link to={`/profile/${userId}`}>\n                            {login}\n                            <Button onClick={logoutCallback}>Logout</Button>\n                        </Link>\n                        : <Link to={'/login'}>Login</Link>\n                    }\n                </Col>\n            </Row>\n        </Header>\n\n    );\n};\n\nexport default AppHeader;\n\n\n\n// <div className={s.loginBlock}>\n// {/*    {props.isAuth*/}\n// {/*        ? <NavLink to={`/profile/${props.userId}`}>*/}\n// {/*            {props.login}*/}\n// {/*            <button onClick={props.logout}>Logout</button>*/}\n// {/*        </NavLink>*/}\n// {/*        : <NavLink to={'/login'}>Login</NavLink>*/}\n// {/*    }*/}\n// {/*</div>*/}\n","import './App.css';\nimport {HashRouter, Link, Route, Switch, withRouter} from \"react-router-dom\";\nimport {LoginPage} from \"./components/Login/Login\";\nimport React, {Component} from \"react\";\nimport {logout} from \"./redux/auth-reducer\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from 'redux';\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport {UsersPage} from './components/Users/UsersContainer';\nimport 'antd/dist/antd.css'\nimport {Breadcrumb, Button, Layout, Menu} from \"antd\";\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons';\nimport Friends from \"./components/Navbar/Friends/Friends\";\nimport AppHeader from \"./components/Header/Header\";\n\nconst {SubMenu} = Menu;\nconst {Header, Content, Footer, Sider} = Layout;\n\n\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\nconst ChatPage = React.lazy(() => import(\"./pages/Chat/ChatPage\"))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = { initializeApp: () => void }\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n\n    catchAllUnhandledErrors(promise: PromiseRejectionEvent) {\n        console.log('Some error occured', promise.reason)\n    }\n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n\n            <Layout>\n                <Header className=\"header\">\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n                        {/*<Menu.Item key=\"1\">nav 1</Menu.Item>*/}\n                    </Menu>\n                    <AppHeader/>\n                </Header>\n                <Content style={{padding: '0 50px'}}>\n                    <Breadcrumb style={{margin: '16px 0'}}>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                defaultSelectedKeys={['1']}\n                                defaultOpenKeys={['sub1']}\n                                style={{height: '100%'}}\n                            >\n\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"Мой профиль\">\n                                    <Menu.Item key=\"1\"><Link to={'/profile'}>Профиль</Link></Menu.Item>\n                                    <Menu.Item key=\"2\"><Link to={'/dialogs'}>Диалоги</Link></Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Разработчики\">\n                                    <Menu.Item key=\"5\"><Link to={'/users'}>Профили</Link></Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub3\" icon={<LaptopOutlined/>} title=\"Чат\">\n                                    <Menu.Item key=\"6\"><Link to={'/chat'}>Чат</Link></Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub4\" icon={<NotificationOutlined/>} title=\"404\">\n                                    <Menu.Item key=\"9\"><Link to={'/news'}>News</Link></Menu.Item>\n                                    <Menu.Item key=\"10\"><Link to={'/music'}>Music</Link></Menu.Item>\n                                    <Menu.Item key=\"11\"><Link to={'/settings'}>Settings</Link></Menu.Item>\n                                </SubMenu>\n                                <Friends/>\n                            </Menu>\n                        </Sider>\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\n                            <Switch>\n                                <Route exact path={'/'} render={withSuspense<any>(ProfileContainer)}/>\n                                <Route path={'/login'} render={() => <LoginPage/>}/>\n                                <Route path={'/chat'} render={withSuspense(ChatPage)}/>\n                                <Route path={'/dialogs'} render={withSuspense<any>(DialogsContainer)}/>\n                                <Route path={'/profile/:userId?'} render={withSuspense<any>(ProfileContainer)}/>\n                                <Route path={'/users'} render={() => <UsersPage pageTitle={'Samurai'}/>}/>\n                                <Route path={'*'} render={() => <div>404 <Button type={\"primary\"}>OK</Button></div>}/>\n                            </Switch>\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>Samurai Social Network 2021</Footer>\n            </Layout>\n        );\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp, logout},\n    ))(App);\n\nlet MainApp: React.FC = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                {/*<React.StrictMode>*/}\n                    <AppContainer/>\n                {/*</React.StrictMode>*/}\n            </Provider>\n        </HashRouter>\n    )\n}\n\nexport default MainApp\n","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n\nReactDOM.render(<MainApp/>, document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__1ZwPZ\",\"error\":\"FormsControl_error__2Zkz5\",\"formSummaryError\":\"FormsControl_formSummaryError__1PkX-\"};","import React from 'react'\nimport s from './FormsControl.module.css'\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\"\n\n\ntype FormPropsType = {\n    meta: WrappedFieldMetaProps\n    children: React.ReactNode\n}\n\n\nexport const FormControl: React.FC<FormPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = error && touched\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : '')}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    );\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, children, ...restProps} = props\n    return (<FormControl {...props}><textarea {...input} {...restProps}/></FormControl>);\n}\n\nexport const InputComponent: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, children, ...restProps} = props\n    return (<FormControl {...props}><input {...input} {...restProps}/></FormControl>)\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n"],"sourceRoot":""}