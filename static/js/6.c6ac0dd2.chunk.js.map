{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","useState","isAutoscroll","setIsAutoscroll","messages","s","messagesAnchorRef","useRef","current","scrollIntoView","block","behavior","style","height","overflowY","onScroll","e","el","currentTarget","scrollHeight","scrollTop","clientHeight","setTimeout","map","m","Message","message","id","ref","newMessage","setNewMessage","onChange","value","disabled","onClick","sendMessage","memo","src","photo","width","alt","to","userId","userName","ChatPage"],"mappings":"iMAkBMA,EAAW,WACb,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAQ/D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,CAACR,IAGA,gCACgB,UAAXE,GAAsB,yQACvB,cAACO,EAAD,IACA,cAACC,EAAD,QAKND,EAAmB,WAAO,IAAD,EACaE,oBAAS,GADtB,mBACpBC,EADoB,KACNC,EADM,KAErBC,EAAWX,aAAY,SAACY,GAAD,OAAqBA,EAAEV,KAAKS,YACnDE,EAAoBC,iBAAuB,MACjDX,qBAAU,WAAO,IAAD,EACZM,IAAY,UAAII,EAAkBE,eAAtB,OAAI,EAA2BC,eAAe,CAACC,MAAO,MAAOC,SAAU,cACpF,CAACT,EAAcE,IAUlB,OACI,sBAAKQ,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SATA,SAACC,GACnD,IAAMC,EAAKD,EAAEE,cACTD,EAAGE,aAAeF,EAAGG,UAAY,IAAMH,EAAGI,cACzCnB,GAAgBoB,YAAW,kBAAMnB,GAAgB,KAAO,KAEzDD,GAAgBC,GAAgB,IAIpC,UACKC,EAASmB,KAAI,SAACC,GAAD,OAAO,cAACC,EAAD,CAAoBC,QAASF,GAAfA,EAAEG,OACrC,qBAAKC,IAAKtB,QAKhBN,EAAyB,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAC1B4B,EAD0B,KACdC,EADc,KAE3BtC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UACzDF,EAAWC,cAUjB,OACI,gCACI,8BACI,cAAC,IAAD,CAAUwC,SAZL,SAACf,GACdc,EAAcd,EAAEE,cAAcc,QAWQA,MAAOH,MAEzC,8BACI,cAAC,IAAD,CAAQI,SAAqB,UAAXzC,EAAoB0C,QAZ5B,WACZL,IACFvC,EAAS6C,YAAYN,IACrBC,EAAc,MASV,0EAMVL,EAA+CW,gBAAK,YAAgB,IAAdV,EAAa,EAAbA,QACxD,OACI,gCACI,qBAAKW,IAAKX,EAAQY,MAAO1B,MAAO,CAAC2B,MAAO,QAASC,IAAI,QACrD,eAAC,IAAD,CAAMC,GAAE,mBAAcf,EAAQgB,QAA9B,UAAyChB,EAAQiB,SAAjD,OACA,uBACCjB,EAAQA,QACT,6BAKGkB,UAxFM,WACjB,OACI,8BACI,cAACvD,EAAD","file":"static/js/6.c6ac0dd2.chunk.js","sourcesContent":["import React, {FC, memo, UIEventHandler, useEffect, useRef, useState} from 'react';\nimport {Button} from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport {Link} from 'react-router-dom';\nimport {ChatMessageAPIType} from '../../api/chat-api';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\nimport {AppStateType} from '../../redux/redux-store';\n\n\nconst ChatPage: FC = () => {\n    return (\n        <div>\n            <Chat/>\n        </div>\n    );\n};\n\nconst Chat: FC = () => {\n    const dispatch = useDispatch()\n    const status = useSelector((state: AppStateType) => state.chat.status)\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [dispatch])\n\n    return (\n        <div>\n            {status === 'error' && <div>Что-то с сокетом не так, перезагрузи страницу</div>}\n            <Messages/>\n            <AddMessageForm/>\n        </div>\n    );\n}\n\nconst Messages: FC<{}> = () => {\n    const [isAutoscroll, setIsAutoscroll] = useState(true)\n    const messages = useSelector((s: AppStateType) => s.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n    useEffect(() => {\n        isAutoscroll && messagesAnchorRef.current?.scrollIntoView({block: 'end', behavior: 'smooth'})\n    }, [isAutoscroll, messages])\n\n    const scrollHandler: UIEventHandler<HTMLDivElement> = (e) => {\n        const el = e.currentTarget\n        if (el.scrollHeight - el.scrollTop - 50 <= el.clientHeight) {\n            !isAutoscroll && setTimeout(() => setIsAutoscroll(true), 500)\n        } else {\n            isAutoscroll && setIsAutoscroll(false)\n        }\n    }\n    return (\n        <div style={{height: '500px', overflowY: 'auto'}} onScroll={scrollHandler}>\n            {messages.map((m) => <Message key={m.id} message={m}/>)}\n            <div ref={messagesAnchorRef}/>\n        </div>\n    );\n};\n\nconst AddMessageForm: FC<{}> = () => {\n    const [newMessage, setNewMessage] = useState('')\n    const status = useSelector((state: AppStateType) => state.chat.status)\n    const dispatch = useDispatch()\n    const onChange = (e: any) => {\n        setNewMessage(e.currentTarget.value)\n    }\n    const onSendMessage = () => {\n        if (!!newMessage) {\n            dispatch(sendMessage(newMessage))\n            setNewMessage('')\n        }\n    }\n    return (\n        <div>\n            <div>\n                <TextArea onChange={onChange} value={newMessage}/>\n            </div>\n            <div>\n                <Button disabled={status !== 'ready'} onClick={onSendMessage}>Отправить</Button>\n            </div>\n        </div>\n    );\n};\n\nconst Message: FC<{ message: ChatMessageAPIType }> = memo(({message}) => {\n    return (\n        <div>\n            <img src={message.photo} style={{width: '40px'}} alt=\"ava\"/>\n            <Link to={`/profile/${message.userId}`}>{message.userName} </Link>\n            <br/>\n            {message.message}\n            <hr/>\n        </div>\n    )\n})\n\nexport default ChatPage\n"],"sourceRoot":""}